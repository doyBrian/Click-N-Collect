{"ast":null,"code":"import _classCallCheck from \"/Users/doybrian/Desktop/reactpractice/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/doybrian/Desktop/reactpractice/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/doybrian/Desktop/reactpractice/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/doybrian/Desktop/reactpractice/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/doybrian/Desktop/reactpractice/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/doybrian/Desktop/reactpractice/src/components/Counter.js\";\nimport React from \"react\"; // By extending the React.Component class, Counter inherits functionality from it\n\nvar Counter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Counter, _React$Component);\n\n  function Counter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Counter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      count: 0\n    };\n\n    _this.handleIncrement = function () {\n      // We always use the setState method to update a component's state\n      _this.setState({\n        count: _this.state.count + 1\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    // The render method returns the JSX that should be rendered\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"card text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-header bg-primary text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Click Counter!\"), React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"card-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Click Count: \", this.state.count), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.handleIncrement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Increment\")));\n    }\n  }]);\n\n  return Counter;\n}(React.Component);\n\nexport default Counter;","map":{"version":3,"sources":["/Users/doybrian/Desktop/reactpractice/src/components/Counter.js"],"names":["React","Counter","state","count","handleIncrement","setState","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;IACMC,O;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE;AADD,K;;UAKRC,e,GAAkB,YAAM;AACtB;AACA,YAAKC,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAAE,MAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,K;;;;;;;AAED;6BACS;AACP,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAIE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAuC,KAAKD,KAAL,CAAWC,KAAlD,CADF,EAEE;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,OAAO,EAAE,KAAKC,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CAJF,CADF;AAaD;;;;EA3BmBJ,KAAK,CAACM,S;;AA8B5B,eAAeL,OAAf","sourcesContent":["import React from \"react\";\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass Counter extends React.Component {\n  // Setting the initial state of the Counter component\n  state = {\n    count: 0\n  };\n\n  // handleIncrement increments this.state.count by 1\n  handleIncrement = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n      <div className=\"card text-center\">\n        <div className=\"card-header bg-primary text-white\">\n          Click Counter!\n        </div>\n        <div className=\"card-body\">\n          <p className=\"card-text\">Click Count: {this.state.count}</p>\n          <button className=\"btn btn-primary\" onClick={this.handleIncrement}>\n            Increment\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}